iex(1)> import Ecto.Query
Ecto.Query
  
iex(2)> alias PetClinic.PetsClinicService.Pet
PetClinic.PetsClinicService.Pet
             
iex(3)> alias PetClinic.Repo
PetClinic.Repo




----------- CREAR UN PET-------------

iex(4)> rufo = %Pet{age: 3, name: "rufo", type: "dog", sex: "male"}
%PetClinic.PetsClinicService.Pet{
  __meta__: #Ecto.Schema.Metadata<:built, "pets">,
  age: 3,
  id: nil,
  inserted_at: nil,
  name: "rufo",
  sex: "male",
  type: "dog",
  updated_at: nil
}

iex(6)> Repo.insert(rufo)
[debug] QUERY OK db=30.8ms decode=15.1ms queue=0.8ms idle=1463.7ms
INSERT INTO "pets" ("age","name","sex","type","inserted_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "id" [3, "rufo", "male", "dog", ~N[2022-04-20 20:21:39], ~N[2022-04-20 20:21:39]]
{:ok,
 %PetClinic.PetsClinicService.Pet{
   __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
   age: 3,
   id: 6,
   inserted_at: ~N[2022-04-20 20:21:39],
   name: "rufo",
   sex: "male",
   type: "dog",
   updated_at: ~N[2022-04-20 20:21:39]
 }}



----------- CONSLTAR PETS -------------

iex(7)> Repo.all(from p in Pet) 
[debug] QUERY OK source="pets" db=0.4ms queue=0.6ms idle=1481.1ms
SELECT p0."id", p0."age", p0."name", p0."sex", p0."type", p0."inserted_at", p0."updated_at" FROM "pets" AS p0 []
[
  %PetClinic.PetsClinicService.Pet{
    __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
    age: 10,
    id: 1,
    inserted_at: ~N[2022-04-20 06:13:24],
    name: "Bubafina",
    sex: "flemale",
    type: "cat",
    updated_at: ~N[2022-04-20 06:13:24]
  },
  %PetClinic.PetsClinicService.Pet{
    __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
    age: 7,
    id: 2,
    inserted_at: ~N[2022-04-20 15:24:02],
    name: "Shaggy",
    sex: "male",
    type: "dog",
    updated_at: ~N[2022-04-20 15:24:02]
  },
  %PetClinic.PetsClinicService.Pet{
    __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
    age: 5,
    id: 4,
    inserted_at: ~N[2022-04-20 19:56:13],
    name: "yesca",
    sex: "flemale",
    type: "dog",
    updated_at: ~N[2022-04-20 19:56:13]
  },
  %PetClinic.PetsClinicService.Pet{
    __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
    age: 1,
    id: 5,
    inserted_at: ~N[2022-04-20 19:59:20],
    name: "jazmin",
    sex: "flemale",
    type: "frog",
    updated_at: ~N[2022-04-20 19:59:20]
  },
  %PetClinic.PetsClinicService.Pet{
    __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
    age: 3,
    id: 6,
    inserted_at: ~N[2022-04-20 20:21:39],
    name: "rufo",
    sex: "male",
    type: "dog",
    updated_at: ~N[2022-04-20 20:21:39]
  }
]



----------- CONSLTAR PETS CON MAS DE UN CRITERIO -------------

iex(9)> Repo.all(from p in Pet, select: [p.name, p.age, p.type], where: p.type == "dog" and p.age > 4, order_by: p.id )
[debug] QUERY OK source="pets" db=0.6ms queue=0.9ms idle=1352.0ms
SELECT p0."name", p0."age", p0."type" FROM "pets" AS p0 WHERE ((p0."type" = 'dog') AND (p0."age" > 4)) ORDER BY p0."id" []
[["Shaggy", 7, "dog"], ["yesca", 5, "dog"]]




----------- ACTUALIZAR PET ------------
CONSULTAR PET

iex(6)> rufo = Repo.get(Pet,6)
[debug] QUERY OK source="pets" db=0.8ms queue=0.1ms idle=1047.1ms
SELECT p0."id", p0."age", p0."name", p0."sex", p0."type", p0."inserted_at", p0."updated_at" FROM "pets" AS p0 WHERE (p0."id" = $1) [6]
%PetClinic.PetsClinicService.Pet{
  __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
  age: 3,
  id: 6,
  inserted_at: ~N[2022-04-20 20:21:39],
  name: "rufo",
  sex: "male",
  type: "dog",
  updated_at: ~N[2022-04-20 20:21:39]
}

CHANGESET

iex(8)> rufo_update = Ecto.Changeset.change(rufo, age: 6)
#Ecto.Changeset<
  action: nil,
  changes: %{age: 6},
  errors: [],
  data: #PetClinic.PetsClinicService.Pet<>,
  valid?: true
>

ACTUALIZAR

iex(15)> Repo.update(rufo_update)
[debug] QUERY OK db=16.5ms queue=1.0ms idle=1963.8ms
UPDATE "pets" SET "age" = $1, "updated_at" = $2 WHERE "id" = $3 [6, ~N[2022-04-20 20:58:36], 6]
{:ok,
 %PetClinic.PetsClinicService.Pet{
   __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
   age: 6,
   id: 6,
   inserted_at: ~N[2022-04-20 20:21:39],
   name: "rufo",
   sex: "male",
   type: "dog",
   updated_at: ~N[2022-04-20 20:58:36]
 }}

CONSULTAR

iex(16)> Repo.get(Pet,6)
[debug] QUERY OK source="pets" db=0.8ms queue=0.1ms idle=1047.1ms
SELECT p0."id", p0."age", p0."name", p0."sex", p0."type", p0."inserted_at", p0."updated_at" FROM "pets" AS p0 WHERE (p0."id" = $1) [6]
%PetClinic.PetsClinicService.Pet{
  __meta__: #Ecto.Schema.Metadata<:loaded, "pets">,
  age: 6,
  id: 6,
  inserted_at: ~N[2022-04-20 20:21:39],
  name: "rufo",
  sex: "male",
  type: "dog",
  updated_at: ~N[2022-04-20 20:58:36]
}


------------ BORRAR UN PET :'( -------------

iex(16)> Repo.delete(Repo.get(Pet, 2))
[debug] QUERY OK source="pets" db=2.5ms idle=1066.3ms
SELECT p0."id", p0."age", p0."name", p0."sex", p0."type", p0."inserted_at", p0."updated_at" FROM "pets" AS p0 WHERE (p0."id" = $1) [2]
[debug] QUERY OK db=41.4ms queue=0.5ms idle=1068.9ms
DELETE FROM "pets" WHERE "id" = $1 [2]
{:ok,
 %PetClinic.PetsClinicService.Pet{
   __meta__: #Ecto.Schema.Metadata<:deleted, "pets">,
   age: 7,
   id: 2, 
   inserted_at: ~N[2022-04-20 15:24:02],
   name: "Shaggy",
   sex: "male",
   type: "dog",
   updated_at: ~N[2022-04-20 15:24:02]
 }}
